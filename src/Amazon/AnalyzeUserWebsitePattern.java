package Amazon;

import java.util.*;

public class AnalyzeUserWebsitePattern {

        public List<String> mostVisitedPattern(String[] username, int[] timestamp, String[] website) {
            List<String> res = new ArrayList<>();

            Map<String, List<Pair>> map = new HashMap<>();
            //key = username, value = all websites the user visited

            //construct the map of all visites
            for(int i = 0; i < username.length; i++){
                String user = username[i];
                Pair newPair = new Pair(timestamp[i], website[i]);
                if(!map.containsKey(user)){
                    map.put(user, new ArrayList<Pair>());
                }
                map.get(user).add(newPair);
            }

            //use a map<key = 3-sequence, value = cnt>
            Map<String, Integer> sequences = new HashMap<>();

            String tmp = "";//initialize the output sequence

            //sort each user's visit list by its timestamp
            for(String user: map.keySet()){

                List<Pair> visits = map.get(user);

                Collections.sort(visits, (a, b) -> (a.time - b. time));

                Set<String> curUser = new HashSet<>();//used to denote each sequence is generated by 1 user once

                //construct all possible 3-sequence

                for(int i  = 0; i < visits.size(); i++){
                    for(int j = i + 1; j < visits.size(); j++){
                        for(int k = j + 1; k < visits.size(); k++){

                            String seq = visits.get(i).website + " " + visits.get(j).website + " " + visits.get(k).website;

                            if(!curUser.contains(seq)){
                                sequences.put(seq, sequences.getOrDefault(seq, 0) + 1);
                                curUser.add(seq);//also mark the current sequence as visited for cur user
                            }

                            if(tmp.equals("") || sequences.get(seq) > sequences.get(tmp) || (sequences.get(seq) == sequences.get(tmp)  && (seq.compareTo(tmp) < 0))) {
                                tmp = seq;
                            }
                        }
                    }
                }

            }
            //output
            String[] webs = tmp.split(" ");

            for(String web: webs){
                res.add(web);
            }


            return res;

        }

        class Pair{
            int time;
            String website;
            Pair(int time, String website){
                this.time = time;
                this.website = website;
            }
        }

}
